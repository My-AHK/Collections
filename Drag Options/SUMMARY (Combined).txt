


(Merged analysis of 3 scripts focusing on AutoHotkey GUI dragging techniques)

PURPOSE:
These three scripts collectively explore different techniques for enabling draggable AutoHotkey GUIs without relying on traditional title bars. Their goals span three distinct use cases:
  1. Drag via a specific control (e.g., a Text label).
  2. Drag from any point within a GUI window.
  3. Drag a non-activated always-on-top window without stealing focus.
Together, they provide a modular toolkit for draggable, minimalistic, or overlay-style windows.

KEY FEATURES:
Each script implements drag behavior with variations in activation logic, drag regions, and user interaction methods.
 • Script 1:
    - Drag initiates only from a Text control (gLabel used).
    - PostMessage simulates a WM_NCLBUTTONDOWN event.
    - Clean, captionless design with targeted drag control.

 • Script 2:
    - Entire GUI surface is draggable (client-wide drag).
    - Global OnMessage hook processes WM_LBUTTONDOWN.
    - No need for special labels or controls—applies universally.

 • Script 3:
    - GUI can be dragged while inactive via Ctrl + LButton.
    - Prevents focus stealing unless explicitly activated.
    - Optional right/double-click activation.

Shared benefits:
• Support for borderless/captionless windows.
• Integration with custom styling and fonts.
• Simulate native drag behavior using low-level message tricks.

LOGIC SUMMARY:
All scripts utilize variations of PostMessage, 0xA1, 2 (WM_NCLBUTTONDOWN + HTCAPTION) to emulate standard window movement.
 • Script 1:
    - Specific control triggers the drag using a gLabel.
    - Clicking the text simulates dragging the title bar.

 • Script 2:
    - Hooks WM_LBUTTONDOWN globally and redirects it as if a title bar click occurred.
    - No control-level labels required.

 • Script 3:
    - Uses hotkey conditions (#If) to restrict interaction when mouse is over GUI.
    - Calculates mouse offset manually during drag.
    - Drag without activating using the NA (NoActivate) window style.

LAYOUT:
Each script designs a small, focused window (approx. 300×250) with minimalistic, instructive visuals.
Common themes include:
• Verdana font, yellow text on a custom background (#123456).
• GUI contains instructional or warning text.
• No title bar, border, or system buttons.

Script 3 is the most visually complex, using:
• Emphasized “NOT” warnings in red.
• Italic and centered instructions for keyboard/mouse usage.

USER EXPERIENCE:
These scripts create seamless GUI interactions for advanced use cases such as overlays, widgets, or custom tool panels.
 • Script 1:
    - Intuitive single-point drag via a clearly labeled text box.
    - Great for static UIs with a fixed drag handle.

 • Script 2:
    - Entire window surface is interactive—drag anywhere with no labels needed.
    - Ideal for minimalistic frameless tools.

 • Script 3:
    - Power-user focused; allows repositioning of a GUI without interfering with the active window.
    - Provides granular control over GUI focus state.

Universal UX benefits:
• Title bar is not needed for movement.
• Visual feedback is immediate.
• No flickering or lag during drag.
• Clean support for focused or passive UIs.



