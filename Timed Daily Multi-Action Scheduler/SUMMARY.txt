
*  Time-based multi-action executor with logging.


PURPOSE:
This script is designed to execute a series of predefined actions at specific times each day, with robust error checking, daily reset functionality, and detailed logging. 
It ensures that each action set runs only once per scheduled time per day, with the ability to include delays, run programs or URLs, reload or exit the script, and provide audible feedback.

KEY FEATURES:
The script incorporates both scheduled execution and manual triggering for testing. 
Actions are configured as time-bound lists that can include delays, sounds, program launches, and script control commands.
It uses file-based flag storage to track completed actions, automatically resets daily at midnight, and performs full validation of configurations to prevent runtime issues.
   • Executes multiple actions per scheduled time in sequence.
   • Supports action types: Delay, SoundBeep, Run command/URL, Reload script, ExitApp.
   • Prevents duplicate execution for the same time each day via flag tracking.
   • Resets executed action flags automatically at midnight.
   • Manual test trigger (Ctrl+Alt+T) for debugging.
   • Detailed log entries with timestamps for all events and errors.
   • Full configuration validation with warnings for invalid formats.
   • Automatic backup and restore mechanism for flag files.

LOGIC SUMMARY:
The script operates through timers that continuously check the system time and compare it to configured triggers. 
When a match is found, it verifies the action has not already run for that day, marks it as executed, saves this state, and processes each action in sequence. 
Delays are implemented between actions where specified. 
A midnight check resets all flags, enabling the schedule to repeat the next day.
   • "Check_Time" --Timer runs every second to detect matching triggers.
       ⮞ Executes actions sequentially when time matches and not yet run.
       ⮞ Saves execution state immediately to prevent duplication.
   • "Midnight_Reset" --Timer checks once per minute to detect a date change.
       ⮞ Clears execution flags and logs the reset.
   • "Perform_Action" --Handles execution logic for each type of action.
       ⮞ Validates delay range (0–300,000 ms) before sleeping.
       ⮞ Executes or logs errors for commands and URLs.
   • "Validate_Configuration" --Ensures triggers and actions are correctly structured before running.
   • "Load_Flags" and "Save_Flags" --Manage execution history persistence.
   • "Log_Entry" --Centralizes logging with timestamps and error handling.

LAYOUT:
The script is organized into clearly defined sections, each handling a specific role in functionality.
Initialization sets up environment variables, timers, and configurations.
Core processing routines are separated from support functions such as logging, file operations, and validation, ensuring maintainability.
   • Environment setup for consistent script behavior.
   • Configuration section defining time-action pairs.
   • Startup validation and loading of execution flags.
   • Main loop for time checks and midnight reset.
   • Action execution handler for interpreting commands.
   • File operations for saving/loading state and creating backups.
   • Logging and error handling utilities.
   • Exit handler ensuring clean termination.

USER EXPERIENCE:
From the user’s perspective, the script runs silently in the background, executing actions exactly when scheduled without duplicates in a single day.
Users can easily add or modify scheduled actions in the configuration section, with built-in safeguards to prevent common mistakes.
The log file provides full transparency, making it easy to diagnose issues or confirm execution history.
   • Minimal setup: user only needs to modify the "TargetActions" dictionary.
   • Clear logging allows verification of successful and failed actions.
   • Automatic daily reset ensures schedules repeat reliably.
   • Manual trigger hotkey aids in testing without waiting for scheduled times.
   • Safety features prevent invalid delays and commands from disrupting execution.
   • Backups protect execution state against file corruption.

