

*  Highly customizable AHK notification system.


PURPOSE:
This script provides a highly customizable notification GUI system for AutoHotkey, designed to display rich, interactive alerts with extensive styling options. 
It allows users to create visually distinct messages with custom backgrounds, icons, fonts, colors, and buttons, which can be positioned anywhere on screen and may auto-dismiss after a set time. 
The system includes multiple pre-configured examples and supports dynamic reloading for development purposes.

KEY FEATURES:
The script offers comprehensive customization through its guiNotify function, supporting dual icons, independent font styling for two text lines, customizable button labels, and automatic timeout functionality. 
Notifications remain always on top and can be dragged by the user. 
The script also includes a sophisticated tray menu with quick access to debugging tools and script management options.

• Custom background colors and optional border
• Support for zero, one, or two icons from system DLLs or custom files
• Independent font size, style (Bold/Italic/Norm), and color for each text line
• Optional text shadow effects with customizable offset
• Three customizable buttons with individual click handlers
• Configurable auto-dismiss timeout
• Draggable window functionality
• Precise screen positioning control

LOGIC SUMMARY:
The script centers around the guiNotify function which constructs the notification GUI dynamically based on parameters. 
It parses font specifications, handles icon resources, applies styling, and manages the GUI lifecycle. 
Button clicks trigger specific handlers that destroy the GUI and show confirmation messages. 
A timer system handles auto-dismissal, while WM_LBUTTONDOWNdrag enables window dragging. 
The script uses a hook (CBTProc) to position message boxes precisely according to SetMsgBoxPosition coordinates.

• Main guiNotify function accepts 13 parameters for complete customization
• Font parsing uses RegExMatch to extract size and style specifications
• Global variables maintain button text and timeout settings between calls
• Separate auto-close timer destroys GUI after specified timeout
• WM_LBUTTONDOWNdrag implementation enables click-and-drag functionality
• UpdateCheck timer automatically reloads script when file modifications are detected

LAYOUT:
The notification GUI features a clean, centered layout with optional icons on the left, followed by two text lines with independent styling, and three horizontally aligned buttons at the bottom. 
The overall size adjusts dynamically based on content, with consistent spacing and padding throughout. 
The tray menu organizes functions into logical groups with appropriate icons and includes both standard and custom script management options.

• Fixed 400px width with dynamic height calculation
• Icons positioned at x10 with 31px spacing between them
• Text elements centered within 380px width
• Buttons arranged horizontally with specific positioning: first button at x15, second at x150, third at x285
• Text shadow implemented through overlapping text controls with offset coordinates
• Tray menu organized into sections with separators and system icons

USER EXPERIENCE:
Users experience polished, professional notifications that can be triggered via hotkeys (Ctrl+F1 through Ctrl+F5) with different pre-configured styles. 
The notifications are interactive, allowing clicking, dragging, or automatic dismissal. 
The tray menu provides comprehensive script control and access to AHK tools. 
The script offers immediate visual feedback through sound cues and maintains persistent state across notifications.

• Five example configurations demonstrate different styling combinations
• Visual feedback through system sounds for reloads and exits
• Smooth dragging experience through Windows message handling
• Consistent visual language across all notification types
• Quick access to documentation and debugging tools via tray menu
• Double-tap hotkeys for critical functions (Ctrl+Home for reload, Ctrl+Esc for exit)

.


